import logging

from aiogram import Bot, Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hpre
from aiogram.fsm.context import FSMContext

from utils.chiper import Encrypter
from database.model import Database
from state.bot_state import BotState

chiper_router = Router()
en = Encrypter()
db = Database()


@chiper_router.message(Command('encrypt'))
async def encrypt_text(message: Message):
    try:
        user_id = message.from_user.id
        data = await db.get_data(tg_id=user_id)
        token = data.get("chipr_key")
        text = message.text.split(maxsplit=1)
        if len(text) > 1:
            text = text[1]
            encrypted_text = en.encrypt(text, token)
            await message.answer(text=f"{hbold('–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:')}\n"
                                 f"{hpre(encrypted_text)}\n"
                                 )
        else:
            await message.reply(text="–ö–æ–º–∞–Ω–¥–∞ /encrypt –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /encrypt –ü—Ä–∏–≤—ñ—Ç —Å–≤—ñ—Ç")

    except Exception:
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")


@chiper_router.message(Command('decrypt'))
async def decrypt_text(message: Message):
    try:
        user_id = message.from_user.id
        data = await db.get_data(tg_id=user_id)
        token = data.get("chipr_key")
        text = message.text.split(maxsplit=1)
        if len(text) > 1:
            text = text[1]
            decrypted_text = en.decrypt(text, token)
            await message.answer(text=f"{hbold('–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:')}\n"
                                 f"{hpre(decrypted_text)}\n"
                                 )
        else:
            await message.reply(text="–ö–æ–º–∞–Ω–¥–∞ /decrypt –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /decrypt U2FsdGVkX1_n7Y6L46X6Xw_...")

    except Exception:
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")


@chiper_router.message(Command('textX'))
async def decrypt_with_token(message: Message, state: FSMContext):
    await message.answer(text=f"{hbold('–í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –∫–ª—é—á')}")
    await state.set_state(BotState.token)


@chiper_router.message(BotState.token)
async def handle_token(message: Message, state: FSMContext):
    try:
        token = message.text
        data = await db.check_user_token(user_token=token)
        if data is False:
            await message.answer(text=f"{hbold('–ö–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}!")
            return
        else:
            await state.update_data(token=message.text)
            await message.answer(text=f"{hbold('–û–∫ —Ç–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω—è')}")
            await state.set_state(BotState.text)
    except Exception:
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")



@chiper_router.message(BotState.text)
async def handle_text(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        token = data.get('token')
        chipr_key = await db.get_key(token=token)
        text = message.text
        decrypted_text = en.decrypt_user_key(encrypted_text=text, user_key=chipr_key)
        await message.answer(text=f"{hbold('–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:')}\n"
                                 f"{hpre(decrypted_text)}\n"
                                 )
        await state.clear()
    except Exception:
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.(–ú–∞–±—É—Ç—å –Ω–µ –≤—ñ—Ä–Ω–∏–π —à–∏—Ñ—Ä üòï)")


